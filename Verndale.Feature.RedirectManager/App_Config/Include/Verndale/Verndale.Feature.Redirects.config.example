<!--
Purpose: This include file is to enable the Redirect Tool by overwrite the item not found handler
To enable this, rename this file so that it has a ".config" extension
-->

<configuration xmlns:patch="http://www.sitecore.net/xmlconfig/">
	<sitecore>
		<sites>
			<!-- NOT FOUND PAGE ID For use with patch for handling 404 post Item resolver(PageNotFoundHandler), each site entry should have it's own 404 Page -->
			<site name="website">
				<patch:attribute name="NotFoundPageID">{AD0B8EBD-3635-42DA-B390-D72D4BF73B83}</patch:attribute>
			</site>
		</sites>
		<settings>

			<!--  USE SERVER-SIDE REDIRECT FOR REQUEST ERRORS
			Overwrite the default value (false) because the Redirect Manager needs to use Server.Transfer instead of Response.Redirect 
			to redirect request to service pages when an error occurs (item not found, access denied etc).
			This will allow the Redirect Manager to set an appropriate response code.
			-->
			<setting name="RequestErrors.UseServerSideRedirect">
				<patch:attribute name="value">true</patch:attribute>
			</setting>


			<!--  SAVE RAW URL ON LOGIN
			Specifies whether the original request URL is passed to the login page 
			(saved in 'url' query string parameter).
			Default: false
			-->
			<setting name="Authentication.SaveRawUrl">
				<patch:attribute name="value">true</patch:attribute>
			</setting>

			<!-- Auto update redirect manager entries settings -->

			<!-- If set to true - when an item is moved - on publish - an entry is added into redirect manager with old and new paths
			If an entry already exists which redirects to the old url (before move) - that entry is merely updated 
			-->
			<setting name="Verndale.Feature.Redirects.EnableAutoRedirect.Move" value="false" />

			<!-- If set to true - when an item is renamed - on publish - an entry is added into redirect manager with old and new paths
			If an entry already exists which redirects to the old url (before rename) - that entry is merely updated 
			-->
			<setting name="Verndale.Feature.Redirects.EnableAutoRedirect.Rename" value="false" />

			<!-- If set to true - when an item is deleted - on publish - an entry is added to redirect manager with old path and 
			new path set to site Home, also if there is any existing redirect to this item, the new url for this redirect is set to home 
			-->
			<setting name="Verndale.Feature.Redirects.EnableAutoRedirect.Delete" value="false" />
		</settings>

		<commands>
			<command name="redirectmanager:delete" type="Verndale.Feature.Redirects.Commands.Delete,Verndale.Feature.Redirects"/>
			<command name="redirectmanager:newredirect" type="Verndale.Feature.Redirects.Commands.New,Verndale.Feature.Redirects"/>
			<command name="redirectmanager:clearall" type="Verndale.Feature.Redirects.Commands.ClearAll,Verndale.Feature.Redirects"/>
			<command name="redirectmanager:import" type="Verndale.Feature.Redirects.Commands.Import,Verndale.Feature.Redirects"/>
			<command name="redirectmanager:export" type="Verndale.Feature.Redirects.Commands.Export,Verndale.Feature.Redirects"/>
			<command name="redirectmanager:editredirect" type="Verndale.Feature.Redirects.Commands.Edit,Verndale.Feature.Redirects"/>
		</commands>

		<AntiCsrf cookieName="__CSRFCOOKIE" formFieldName="__CSRFTOKEN" detectionResult="RaiseException" errorPage="" enabled="true">
			<rules>
				<rule name="shell">
					<ignore contains="Applications/Redirect Manager" />
				</rule>
			</rules>
		</AntiCsrf>

		<AntiCsrf>
			<rules>
				<rule name="shell">
					<ignore contains="Applications/Redirect Manager"/>
				</rule>
			</rules>
		</AntiCsrf>

		<pipelines>
			<httpRequestBegin>
				<!-- 
				Attempt to match the requested URL to a redirect rule if it has not been resolved to a Sitecore Item.
				-->
				<processor
					type="Verndale.Feature.Redirects.Pipelines.HttpRequest.RedirectResolver, Verndale.Feature.Redirects"
					patch:after="processor[@type='Sitecore.Pipelines.HttpRequest.ItemResolver, Sitecore.Kernel']">
					<databasesToIgnore>core</databasesToIgnore>
					<sitesToIgnore>shell,login,admin,service,modules_shell,modules_website,scheduler,system,publisher</sitesToIgnore>
				</processor>
				
				<!--
				Attempt to link the user to a given site's 404 page, because there were no matching Items or Redirects.
				-->
				<processor
					type="Verndale.Feature.Redirects.Pipelines.HttpRequest.PageNotFoundResolver, Verndale.Feature.Redirects"
					patch:after="processor[@type='Verndale.Feature.Redirects.Pipelines.HttpRequest.RedirectResolver, Verndale.Feature.Redirects']">
					<databasesToIgnore>core</databasesToIgnore>
					<sitesToIgnore>shell,login,admin,service,modules_shell,modules_website,scheduler,system,publisher</sitesToIgnore>
				</processor>
			</httpRequestBegin>

			<initialize>
				<!--
				Kicks off the Package Verifier, which has a separate configuration area to keep the Initialize pipeline clear.
				-->
				<processor type="Constellation.Foundation.PackageVerification.Pipelines.Initialize.PackageVerifier, Constellation.Foundation.PackageVerification" />
			</initialize>
		</pipelines>
		<constellation>
			<!--
			Package Verifier Configuration
			
			defaultProcessorType: Must descend from the default value - Constellation.Foundation.PackageVerification.PackageProcessor, Constellation.Foundation.PackageVerification
			
			package nodes: 
					name: Just to make them easy to spot. Should be unique. Also allows you to sc:patch them!
					packageFileName: the name of the .zip file. IMPORTANT: should already exist in data-folder/packages.
					processorOverrideType: If you don't want to use the default processor.
					
					Artifacts: Items that will exist if the package referenced was previously installed. Should be something a user wouldn't modify.
					You can supply more than one if you have to check multiple databases or disparate parts of the content tree.
					
					
					id: the ID of the Item that should exist
					database: the database where the Item lives, typically master or core.
			
			-->
			<packageVerifier defaultProcessorType="Constellation.Foundation.PackageVerification.PackageProcessor, Constellation.Foundation.PackageVerification">
				<package name="Verndale.Feature.Redirects" packageFileName="Verndale-Feature-Redirects-9.0.1.zip">
					<artifact id="{68AD9063-78E7-48EA-BC7D-E85298419E94}" database="core"/>
				</package>
			</packageVerifier>
		</constellation>
	</sitecore>
</configuration>