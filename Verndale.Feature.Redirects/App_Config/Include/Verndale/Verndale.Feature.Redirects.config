<?xml version="1.0" encoding="utf-8" ?>
<configuration xmlns:patch="http://www.sitecore.net/xmlconfig/" xmlns:role="http://www.sitecore.net/xmlconfig/role/" >
  <sitecore>

    <settings>

      <!--  USE SERVER-SIDE REDIRECT FOR REQUEST ERRORS
			
			Overwrite the default value (false) because the Redirect Manager needs to use Server.Transfer instead of Response.Redirect 
			to redirect request to service pages when an error occurs (item not found, access denied etc).
			This will allow the Redirect Manager to set an appropriate response code.
			-->
      <setting name="RequestErrors.UseServerSideRedirect">
        <patch:attribute name="value">true</patch:attribute>
      </setting>
    </settings>

    <commands>
      <command name="redirectmanager:delete" type="Verndale.Feature.Redirects.Commands.Delete,Verndale.Feature.Redirects"/>
      <command name="redirectmanager:newredirect" type="Verndale.Feature.Redirects.Commands.New,Verndale.Feature.Redirects"/>
      <command name="redirectmanager:clearall" type="Verndale.Feature.Redirects.Commands.ClearAll,Verndale.Feature.Redirects"/>
      <command name="redirectmanager:import" type="Verndale.Feature.Redirects.Commands.Import,Verndale.Feature.Redirects"/>
      <command name="redirectmanager:export" type="Verndale.Feature.Redirects.Commands.Export,Verndale.Feature.Redirects"/>
      <command name="redirectmanager:editredirect" type="Verndale.Feature.Redirects.Commands.Edit,Verndale.Feature.Redirects"/>
    </commands>

    <AntiCsrf cookieName="__CSRFCOOKIE" formFieldName="__CSRFTOKEN" detectionResult="RaiseException" errorPage="" enabled="true">
      <rules>
        <rule name="shell">
          <ignore contains="Applications/Redirect Manager" />
        </rule>
      </rules>
    </AntiCsrf>

    <AntiCsrf>
      <rules>
        <rule name="shell">
          <ignore contains="Applications/Redirect Manager"/>
        </rule>
      </rules>
    </AntiCsrf>

    <pipelines>
      <httpRequestBegin>
        <!-- 
				REDIRECT RESOLVER
				
				If the Sitecore.Context.Item is null, Attempt to match the requested URL to a redirect rule. If there is a match,
				appropriate response codes and redirects are performed.
				
				This processor must be called after all Site, Language, and Item resolvers, but before any Page Not Found resolvers
				and the Device and Layout resolvers. The patch:after below is a "safe bet". Your configuration may need to differ.
				
				Note that this processor should only run for custom websites and should explicitly not run for Sitecore system sites.
				The current config specifies which sites are ignored. Your configuration may differ.
				-->
        <processor
					type="Verndale.Feature.Redirects.Pipelines.HttpRequest.RedirectResolver, Verndale.Feature.Redirects"
					patch:after="processor[@type='Sitecore.Pipelines.HttpRequest.ItemResolver, Sitecore.Kernel']">
          <databasesToIgnore>core</databasesToIgnore>
          <sitesToIgnore>shell,login,admin,service,modules_shell,modules_website,scheduler,system,publisher</sitesToIgnore>
          <pathsToIgnore>/sitecore,/trace,/layouts,/_dev</pathsToIgnore>
        </processor>
      </httpRequestBegin>

      <initialize>
        <!--
				Kicks off the Package Verifier, which has a separate configuration area to keep the Initialize pipeline clear.
				-->
        <processor type="Constellation.Foundation.PackageVerification.Pipelines.Initialize.PackageVerifier, Constellation.Foundation.PackageVerification" role:require="Standalone or ContentManagement" />
      </initialize>
    </pipelines>
    <constellation>
      <!--
			Package Verifier Configuration
			
			defaultProcessorType: Must descend from the default value - Constellation.Foundation.PackageVerification.PackageProcessor, Constellation.Foundation.PackageVerification
			
			package nodes: 
					name: Just to make them easy to spot. Should be unique. Also allows you to sc:patch them!
					packageFileName: the name of the .zip file. IMPORTANT: should already exist in data-folder/packages.
					processorOverrideType: If you don't want to use the default processor.
					
					Artifacts: Items that will exist if the package referenced was previously installed. Should be something a user wouldn't modify.
					You can supply more than one if you have to check multiple databases or disparate parts of the content tree.
					
					
					id: the ID of the Item that should exist
					database: the database where the Item lives, typically master or core.
			
			-->
      <packageVerifier defaultProcessorType="Constellation.Foundation.PackageVerification.PackageProcessor, Constellation.Foundation.PackageVerification">
        <package name="Verndale.Feature.Redirects" packageFileName="Verndale-Feature-Redirects-9.0.1.zip">
          <artifact id="{68AD9063-78E7-48EA-BC7D-E85298419E94}" database="core"/>
        </package>
      </packageVerifier>
    </constellation>

    <contentSearch>
      <indexConfigurations>
        <defaultSolrIndexConfiguration>
          <documentOptions>
            <fields hint="raw:AddComputedIndexField">
              <field fieldName="nowildcardurl" returnType="string">Verndale.Feature.Redirects.Data.Computed_Fields.WildcardComputedField, Verndale.Feature.Redirects</field>
            </fields>
          </documentOptions>
        </defaultSolrIndexConfiguration>
      </indexConfigurations>
    </contentSearch>
  </sitecore>
</configuration>